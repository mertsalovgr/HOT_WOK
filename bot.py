from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, CHANNEL_USERNAME

WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n"
    "*HOT WOK* ‚Äî —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ª–∞–ø—à–∞ –≤ –¢–±–∏–ª–∏—Å–∏ üçú\n"
    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É!üëá"
)

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ Wolt", url="https://wolt.com/ka/geo/tbilisi/restaurant/hott-wok")],
    [InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ Bolt Food", url="https://food.bolt.eu/ru-RU/15/p/135577-hot-wok")],
    [InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å Go", url="yandextaxi://external?service=eats&href=%2Frestaurant%2Fhot_wok_sn25t%3Futm_campaign%3Dsuperapp_taxi_web%26utm_medium%3Dreferral%26utm_source%3Drst_shared_link")],
    [InlineKeyboardButton("üîπ –ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ Glovo", url="https://ufv9.adj.st?adjust_deeplink=glovoapp%3A%2F%2Fopen%3Flink_type%3Dstore%26store_id%3D504684&adjust_t=s321jkn")],
    [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", callback_data="gift")]
])

async def is_user_subscribed(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "creator", "administrator"]
    except:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        text=WELCOME_MESSAGE,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "gift":
        if await is_user_subscribed(user_id, context):
            await query.answer()
            await query.edit_message_text("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫: [–°–µ–∫—Ä–µ—Ç–Ω—ã–π –±–æ–Ω—É—Å](https://t.me/+zGG8uX1HJdI1NDZi)", parse_mode='Markdown')
        else:
            await query.answer()
            await query.edit_message_text(
                "üôå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                "üëâ [–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è](https://t.me/+zGG8uX1HJdI1NDZi)\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ —Å–Ω–æ–≤–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É üéÅ.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="gift")]
                ])
            )

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())